0,basic
    a,BTYPE: 01 fix huffman
    b,gzip Makefile -k

1,
    $ xxd -b -c 8 -g 1 Makefile.gz| head
        00000000: 00011111 10001011 00001000 00001000 10111011 10110000 11011000 01100010  .......b
        00000008: 00000000 00000011 01001101 01100001 01101011 01100101 01100110 01101001  ..Makefi
        00000010: 01101100 01100101 00000000 11010011 00001011 11110000 11110000 11110111  le......
        00000018: 10001011 10110100 01001010 11001100 11001001 11100001 00000010 01100010  ..J....b
        00000020: 00101011 10000101 11100010 11001100 11011100 10000010 10011100 01010100  +......T
        00000028: 10000101 11001100 10111100 10110100 11110100 11010100 00111100 00101110  ......<.
        00000030: 01010101 00101011 01010101 10111101 01100100 00101110 11001110 11110100  U+U.d...
        00000038: 11100100 01100100 00000101 11011101 10011100 00101010 00000101 00010101  .d...*..
        00000040: 00011011 00000101 11011101 01111100 00000101 00010101 00000111 00101110  ...|....
        00000048: 00000000 11111000 00110101 11011000 11001111 00110110 00000000 00000000  ..5..6..

    $ xxd -C -c 8 -g 1 Makefile.gz
        00000000: 1f 8b 08 08 bb b0 d8 62  .......b
                # 08 08: CM FLG.FNAME
        00000008: 00 03 4d 61 6b 65 66 69  ..Makefi
                # 00 03： XFL OS
        00000010: 6c 65 00 d3 0b f0 f0 f7  le......
                # d3: BHDR, 11010 01(fix huffman) 1(Final Block) ,
        00000018: 8b b4 4a cc c9 e1 02 62  ..J....b
        00000020: 2b 85 e2 cc dc 82 9c 54  +......T
        00000028: 85 cc bc b4 f4 d4 3c 2e  ......<.
        00000030: 55 2b 55 bd 64 2e ce f4  U+U.d...
        00000038: e4 64 05 dd 9c 2a 05 15  .d...*..
        00000040: 1b 05 dd 7c 05 15 07 2e  ...|....
        00000048: 00 f8 35 d8 cf 36 00 00  ..5..6..
        00000050: 00                       .

2,infgen
    last	        ! 1
    fixed		! 01
    literal '.		! 01111010          #0x14/13 2个字节binary 连续为 00001 01111010 01 1       ,gz中的编码
                                            #按照规范 Huffman codes are packed starting with the most-significant bit of the code.
							huffman codes 从右边开始是most-significant bit.

                                            #'.' 计算 0111 1010, 改为 most significant 即, 01010101
                                                Lit Value    Bits        Codes
                                                ---------    ----        -----
                                                   0 - 143     8          00110000 through 10111111

                                                $ echo -n '.' | xxd -g 1 -b
                                                    00000000: 00101110                                               .

                                                00110000
                                                00101110 +
                                                ------------
                                                01011110            #根据编码范围计算出的编码.



    match 3 4		! 11000 1000000 	#这是huffman code. bit0是MSB
        #11000      这是distance
        #1000000    这是Length ,转为human readable为 0000001, 在   256 - 279     7          0000000 through 0010111,范围
                    转为 Lit value 为 257,根据Length 表得到Lit value 257 代表Length为3

		       Extra               Extra
		    Code Bits Length(s) Code Bits Lengths   Code Bits Length(s)
		    ---- ---- ------     ---- ---- -------   ---- ---- -------
		     257   0     3       267   1   15,16     277   4   67-82 		#257 对应的Length 为3.
		     258   0     4       268   1   17,18     278   4   83-98
		     259   0     5       269   2   19-22     279   4   99-114
		     260   0     6       270   2   23-26     280   4  115-130
		     261   0     7       271   2   27-30     281   5  131-162
		     262   0     8       272   2   31-34     282   5  163-194
		     263   0     9       273   3   35-42     283   5  195-226
		     264   0    10       274   3   43-50     284   5  227-257
		     265   1  11,12      275   3   51-58     285   0    258
		     266   1  13,14      276   3   59-66
