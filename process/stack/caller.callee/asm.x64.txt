
a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000401000 <_init>:
  401000:	f3 0f 1e fa          	endbr64
  401004:	48 83 ec 08          	sub    $0x8,%rsp
  401008:	48 8b 05 e9 2f 00 00 	mov    0x2fe9(%rip),%rax        # 403ff8 <__gmon_start__>
  40100f:	48 85 c0             	test   %rax,%rax
  401012:	74 02                	je     401016 <_init+0x16>
  401014:	ff d0                	callq  *%rax
  401016:	48 83 c4 08          	add    $0x8,%rsp
  40101a:	c3                   	retq

Disassembly of section .plt:

0000000000401020 <.plt>:
  401020:	ff 35 e2 2f 00 00    	pushq  0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:	ff 25 e4 2f 00 00    	jmpq   *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401030 <random@plt>:
  401030:	ff 25 e2 2f 00 00    	jmpq   *0x2fe2(%rip)        # 404018 <random@GLIBC_2.2.5>
  401036:	68 00 00 00 00       	pushq  $0x0
  40103b:	e9 e0 ff ff ff       	jmpq   401020 <.plt>

Disassembly of section .text:

0000000000401040 <_start>:
  401040:	f3 0f 1e fa          	endbr64
  401044:	31 ed                	xor    %ebp,%ebp
  401046:	49 89 d1             	mov    %rdx,%r9
  401049:	5e                   	pop    %rsi
  40104a:	48 89 e2             	mov    %rsp,%rdx
  40104d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  401051:	50                   	push   %rax
  401052:	54                   	push   %rsp
  401053:	49 c7 c0 d0 12 40 00 	mov    $0x4012d0,%r8
  40105a:	48 c7 c1 60 12 40 00 	mov    $0x401260,%rcx
  401061:	48 c7 c7 9c 11 40 00 	mov    $0x40119c,%rdi
  401068:	ff 15 82 2f 00 00    	callq  *0x2f82(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.2.5>
  40106e:	f4                   	hlt

000000000040106f <.annobin_abi_note.c>:
  40106f:	90                   	nop

0000000000401070 <_dl_relocate_static_pie>:
  401070:	f3 0f 1e fa          	endbr64
  401074:	c3                   	retq

0000000000401075 <.annobin__dl_relocate_static_pie.end>:
  401075:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40107c:	00 00 00
  40107f:	90                   	nop

0000000000401080 <deregister_tm_clones>:
  401080:	b8 28 40 40 00       	mov    $0x404028,%eax
  401085:	48 3d 28 40 40 00    	cmp    $0x404028,%rax
  40108b:	74 13                	je     4010a0 <deregister_tm_clones+0x20>
  40108d:	b8 00 00 00 00       	mov    $0x0,%eax
  401092:	48 85 c0             	test   %rax,%rax
  401095:	74 09                	je     4010a0 <deregister_tm_clones+0x20>
  401097:	bf 28 40 40 00       	mov    $0x404028,%edi
  40109c:	ff e0                	jmpq   *%rax
  40109e:	66 90                	xchg   %ax,%ax
  4010a0:	c3                   	retq
  4010a1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4010a8:	00 00 00 00
  4010ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004010b0 <register_tm_clones>:
  4010b0:	be 28 40 40 00       	mov    $0x404028,%esi
  4010b5:	48 81 ee 28 40 40 00 	sub    $0x404028,%rsi
  4010bc:	48 89 f0             	mov    %rsi,%rax
  4010bf:	48 c1 ee 3f          	shr    $0x3f,%rsi
  4010c3:	48 c1 f8 03          	sar    $0x3,%rax
  4010c7:	48 01 c6             	add    %rax,%rsi
  4010ca:	48 d1 fe             	sar    %rsi
  4010cd:	74 11                	je     4010e0 <register_tm_clones+0x30>
  4010cf:	b8 00 00 00 00       	mov    $0x0,%eax
  4010d4:	48 85 c0             	test   %rax,%rax
  4010d7:	74 07                	je     4010e0 <register_tm_clones+0x30>
  4010d9:	bf 28 40 40 00       	mov    $0x404028,%edi
  4010de:	ff e0                	jmpq   *%rax
  4010e0:	c3                   	retq
  4010e1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4010e8:	00 00 00 00
  4010ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004010f0 <__do_global_dtors_aux>:
  4010f0:	f3 0f 1e fa          	endbr64
  4010f4:	80 3d 29 2f 00 00 00 	cmpb   $0x0,0x2f29(%rip)        # 404024 <completed.0>
  4010fb:	75 13                	jne    401110 <__do_global_dtors_aux+0x20>
  4010fd:	55                   	push   %rbp
  4010fe:	48 89 e5             	mov    %rsp,%rbp
  401101:	e8 7a ff ff ff       	callq  401080 <deregister_tm_clones>
  401106:	c6 05 17 2f 00 00 01 	movb   $0x1,0x2f17(%rip)        # 404024 <completed.0>
  40110d:	5d                   	pop    %rbp
  40110e:	c3                   	retq
  40110f:	90                   	nop
  401110:	c3                   	retq
  401111:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  401118:	00 00 00 00
  40111c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401120 <frame_dummy>:
  401120:	f3 0f 1e fa          	endbr64
  401124:	eb 8a                	jmp    4010b0 <register_tm_clones>

0000000000401126 <myadd9>:
#include <stdio.h>
#include <stdlib.h>

int myadd9(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)\
{
  401126:	55                   	push   %rbp                             #new frame 的开始,保存之前的stack bottom
  401127:	48 89 e5             	mov    %rsp,%rbp                        #当前stack位置即新的rbp
  40112a:	89 7d ec             	mov    %edi,-0x14(%rbp)                 #aa1,临时变量,代码先看到,先入栈.
  40112d:	89 75 e8             	mov    %esi,-0x18(%rbp)
  401130:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  401133:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  401136:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
  40113a:	44 89 4d d8          	mov    %r9d,-0x28(%rbp)                 #aa6
    int sum;
    sum = a1+a2+a3+a4+a5+a6+a7+a8+a9;
  40113e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  401141:	8b 45 e8             	mov    -0x18(%rbp),%eax
  401144:	01 c2                	add    %eax,%edx                        #aa1+aa2,  结果保存到edx中.
  401146:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401149:	01 c2                	add    %eax,%edx
  40114b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  40114e:	01 c2                	add    %eax,%edx
  401150:	8b 45 dc             	mov    -0x24(%rbp),%eax
  401153:	01 c2                	add    %eax,%edx
  401155:	8b 45 d8             	mov    -0x28(%rbp),%eax
  401158:	01 c2                	add    %eax,%edx                        #+aa6 =>edx
  40115a:	8b 45 10             	mov    0x10(%rbp),%eax                  #0x10是因为call 指令包含一条push rip,而函数开头有一条push rbp
  40115d:	01 c2                	add    %eax,%edx                        #也即0(%rbp): 是old rbp,  8(%rbp): 是old rip, 也即ret pop出的eip. 上个函数继续开始执行的地方.
  40115f:	8b 45 18             	mov    0x18(%rbp),%eax                  #0x10(%rbp),第一个参数  0x18: 第二个,  0x20:第三个.
  401162:	01 c2                	add    %eax,%edx
  401164:	8b 45 20             	mov    0x20(%rbp),%eax
  401167:	01 d0                	add    %edx,%eax                        #+aa9 =>eax
  401169:	89 45 fc             	mov    %eax,-0x4(%rbp)                  #sum: -0x4(%rbp), 第一个local 参数.

    return sum;
  40116c:	8b 45 fc             	mov    -0x4(%rbp),%eax                  #通过eax寄存器返回.
}
  40116f:	5d                   	pop    %rbp
  401170:	c3                   	retq                                    #返回指令,与call对应.

0000000000401171 <myadd>:

int myadd(int a, int b)
{
  401171:	55                   	push   %rbp
  401172:	48 89 e5             	mov    %rsp,%rbp
  401175:	48 83 ec 20          	sub    $0x20,%rsp
  401179:	89 7d ec             	mov    %edi,-0x14(%rbp)
  40117c:	89 75 e8             	mov    %esi,-0x18(%rbp)
    int c;
    int d;

    c = random();
  40117f:	e8 ac fe ff ff       	callq  401030 <random@plt>
  401184:	89 45 fc             	mov    %eax,-0x4(%rbp)

    d = a + b + c;
  401187:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40118a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40118d:	01 c2                	add    %eax,%edx
  40118f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  401192:	01 d0                	add    %edx,%eax
  401194:	89 45 f8             	mov    %eax,-0x8(%rbp)
    return d;
  401197:	8b 45 f8             	mov    -0x8(%rbp),%eax
}
  40119a:	c9                   	leaveq
  40119b:	c3                   	retq

000000000040119c <main>:

int main()
{
  40119c:	55                   	push   %rbp
  40119d:	48 89 e5             	mov    %rsp,%rbp
  4011a0:	48 83 ec 40          	sub    $0x40,%rsp
    int a;
    int b;
    int aa1,aa2,aa3,aa4,aa5,aa6,aa7,aa8,aa9;
    int sum,sum1,sum2;

    a = random();
  4011a4:	e8 87 fe ff ff       	callq  401030 <random@plt>
  4011a9:	89 45 fc             	mov    %eax,-0x4(%rbp)
    b = random();
  4011ac:	e8 7f fe ff ff       	callq  401030 <random@plt>
  4011b1:	89 45 f8             	mov    %eax,-0x8(%rbp)
    sum = a + b;
  4011b4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4011b7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4011ba:	01 d0                	add    %edx,%eax
  4011bc:	89 45 f4             	mov    %eax,-0xc(%rbp)
    sum1 = myadd(a,b);
  4011bf:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4011c2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4011c5:	89 d6                	mov    %edx,%esi
  4011c7:	89 c7                	mov    %eax,%edi
  4011c9:	e8 a3 ff ff ff       	callq  401171 <myadd>
  4011ce:	89 45 f0             	mov    %eax,-0x10(%rbp)

    aa1 = random();
  4011d1:	e8 5a fe ff ff       	callq  401030 <random@plt>
  4011d6:	89 45 ec             	mov    %eax,-0x14(%rbp)             #aa1    先入栈.
    aa2 = random();
  4011d9:	e8 52 fe ff ff       	callq  401030 <random@plt>
  4011de:	89 45 e8             	mov    %eax,-0x18(%rbp)             #aa2
    aa3 = random();
  4011e1:	e8 4a fe ff ff       	callq  401030 <random@plt>
  4011e6:	89 45 e4             	mov    %eax,-0x1c(%rbp)             #aa3
    aa4 = random();
  4011e9:	e8 42 fe ff ff       	callq  401030 <random@plt>
  4011ee:	89 45 e0             	mov    %eax,-0x20(%rbp)
    aa5 = random();
  4011f1:	e8 3a fe ff ff       	callq  401030 <random@plt>
  4011f6:	89 45 dc             	mov    %eax,-0x24(%rbp)
    aa6 = random();
  4011f9:	e8 32 fe ff ff       	callq  401030 <random@plt>
  4011fe:	89 45 d8             	mov    %eax,-0x28(%rbp)             #aa6
    aa7 = random();
  401201:	e8 2a fe ff ff       	callq  401030 <random@plt>
  401206:	89 45 d4             	mov    %eax,-0x2c(%rbp)             #aa7
    aa8 = random();
  401209:	e8 22 fe ff ff       	callq  401030 <random@plt>
  40120e:	89 45 d0             	mov    %eax,-0x30(%rbp)             #aa8
    aa9 = random();
  401211:	e8 1a fe ff ff       	callq  401030 <random@plt>
  401216:	89 45 cc             	mov    %eax,-0x34(%rbp)             #aa9

    sum2 = myadd9(aa1,aa2,aa3,aa4,aa5,aa6,aa7,aa8,aa9);
  401219:	44 8b 4d d8          	mov    -0x28(%rbp),%r9d
  40121d:	44 8b 45 dc          	mov    -0x24(%rbp),%r8d
  401221:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  401224:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  401227:	8b 75 e8             	mov    -0x18(%rbp),%esi
  40122a:	8b 45 ec             	mov    -0x14(%rbp),%eax             #aa1 通过eax中转以下
  40122d:	48 83 ec 08          	sub    $0x8,%rsp                    #空闲一个stack
  401231:	8b 7d cc             	mov    -0x34(%rbp),%edi             #参数由右至左顺序入栈,
  401234:	57                   	push   %rdi                         #aa9 入栈
  401235:	8b 7d d0             	mov    -0x30(%rbp),%edi
  401238:	57                   	push   %rdi                         #aa8
  401239:	8b 7d d4             	mov    -0x2c(%rbp),%edi
  40123c:	57                   	push   %rdi                         #aa7
  40123d:	89 c7                	mov    %eax,%edi                    #aa1 通过edi 传递
  40123f:	e8 e2 fe ff ff       	callq  401126 <myadd9>
  401244:	48 83 c4 20          	add    $0x20,%rsp                   #栈平衡,3*push+8 = 0x20字节.
  401248:	89 45 c8             	mov    %eax,-0x38(%rbp)

    return 0;
  40124b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  401250:	c9                   	leaveq
  401251:	c3                   	retq
  401252:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401259:	00 00 00
  40125c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401260 <__libc_csu_init>:
  401260:	f3 0f 1e fa          	endbr64
  401264:	41 57                	push   %r15
  401266:	4c 8d 3d a3 2b 00 00 	lea    0x2ba3(%rip),%r15        # 403e10 <__frame_dummy_init_array_entry>
  40126d:	41 56                	push   %r14
  40126f:	49 89 d6             	mov    %rdx,%r14
  401272:	41 55                	push   %r13
  401274:	49 89 f5             	mov    %rsi,%r13
  401277:	41 54                	push   %r12
  401279:	41 89 fc             	mov    %edi,%r12d
  40127c:	55                   	push   %rbp
  40127d:	48 8d 2d 94 2b 00 00 	lea    0x2b94(%rip),%rbp        # 403e18 <__do_global_dtors_aux_fini_array_entry>
  401284:	53                   	push   %rbx
  401285:	4c 29 fd             	sub    %r15,%rbp
  401288:	48 83 ec 08          	sub    $0x8,%rsp
  40128c:	e8 6f fd ff ff       	callq  401000 <_init>
  401291:	48 c1 fd 03          	sar    $0x3,%rbp
  401295:	74 1f                	je     4012b6 <__libc_csu_init+0x56>
  401297:	31 db                	xor    %ebx,%ebx
  401299:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4012a0:	4c 89 f2             	mov    %r14,%rdx
  4012a3:	4c 89 ee             	mov    %r13,%rsi
  4012a6:	44 89 e7             	mov    %r12d,%edi
  4012a9:	41 ff 14 df          	callq  *(%r15,%rbx,8)
  4012ad:	48 83 c3 01          	add    $0x1,%rbx
  4012b1:	48 39 dd             	cmp    %rbx,%rbp
  4012b4:	75 ea                	jne    4012a0 <__libc_csu_init+0x40>
  4012b6:	48 83 c4 08          	add    $0x8,%rsp
  4012ba:	5b                   	pop    %rbx
  4012bb:	5d                   	pop    %rbp
  4012bc:	41 5c                	pop    %r12
  4012be:	41 5d                	pop    %r13
  4012c0:	41 5e                	pop    %r14
  4012c2:	41 5f                	pop    %r15
  4012c4:	c3                   	retq
  4012c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4012cc:	00 00 00 00

00000000004012d0 <__libc_csu_fini>:
  4012d0:	f3 0f 1e fa          	endbr64
  4012d4:	c3                   	retq

Disassembly of section .fini:

00000000004012d8 <_fini>:
  4012d8:	f3 0f 1e fa          	endbr64
  4012dc:	48 83 ec 08          	sub    $0x8,%rsp
  4012e0:	48 83 c4 08          	add    $0x8,%rsp
  4012e4:	c3                   	retq
